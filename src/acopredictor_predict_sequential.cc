#include <iostream>
#include <vector>
#include <cmath>
#include <memory>

#include "acopredictor.h"

using std::cout;
using std::cerr;
using std::vector;
using std::string;
using std::unique_ptr;

struct ACOPredictor::Results ACOPredictor::predict(){
	ACOSolution bestSol;
	int bestContacts = -1;

	for(int i = 0; i < dCycles; i++){
		vector<ACOSolution> antsSolutions; // Solutions generated by all ants

		// Let each ant develop a solution
		for(int j = 0; j < dNAnts; j++){
			ACOSolution currentSol = ant_develop_solution();
			if(currentSol.has_error() == false){
				antsSolutions.push_back(currentSol);
			}
		}

		// Calculate contacts
		unique_ptr<int[]> nContacts(new int[antsSolutions.size()]);
		for(unsigned j = 0; j < antsSolutions.size(); j++)
			nContacts[j] = antsSolutions[j].count_contacts(dHPChain);

		// Perform local search
		for(unsigned j = 0; j < antsSolutions.size(); j++){
			for(unsigned int k = 0; k < 5; k++){
				ACOSolution tentative = antsSolutions[j];
				int lim = this->random() * tentative.directions().size();
				for(int l = 0; l < lim; l++){
					tentative.perturb_one(dRandGen);
				}
				int contacts = tentative.count_contacts(dHPChain);
				if(contacts > nContacts[j]){
					antsSolutions[j] = tentative;
				}
			}
		}

		// Check best protein
		for(unsigned j = 0; j < antsSolutions.size(); j++){
			if(nContacts[j] > bestContacts){
				bestSol = antsSolutions[j];
				bestContacts = nContacts[j];
			}
		}

		// Deposit pheromones
		for(unsigned j = 0; j < antsSolutions.size(); j++)
			ant_deposit_pheromone(antsSolutions[j].directions(), nContacts[j]);

		// Evaporate pheromones
		evaporate_pheromone();

		/*
		if(i%2 == 0){
			for(int j = 0; j < 5; j++){
				for(int i = 0; i < dNMovElems; i++)
					cout << pheromone(i, j) << " ";
				cout << "\n";
			}
			cout << "\n";
		}
		*/
	}

	Results res = {
		.solution = bestSol,
		.contacts = bestContacts
	};

	return res;
}
